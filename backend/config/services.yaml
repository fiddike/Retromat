# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
    - { resource: retromat/models.yaml }
    - { resource: retromat/commands.yaml }
    - { resource: retromat/fixtures.yaml }
    - { resource: retromat/subscriber.yaml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    knp.doctrine_behaviors.translatable_subscriber.translatable_fetch_method: EAGER
    knp.doctrine_behaviors.translatable_subscriber.translation_fetch_method: EAGER

# default configuration for services in *this* file
services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Command/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Model\Activity\Expander\ActivityExpander:
        arguments:
            $sources: '%retromat.activity.source%'

    App\Model\Importer\Activity\ActivityReader:
        arguments:
            $activityFileNames: '%retromat.activity.import.file_names%'

    App\Model\Importer\Activity\ActivityImporter:
        public: true
        arguments:
            $locales: '%retromat.activity.import.languages.whitelist%'
    App\Model\Plan\TitleChooser:
        arguments:
            $titleParts: '%retromat.plan.titles%'
            $maxLengthIncludingPlanId: 60

    App\Model\Plan\TitleIdGenerator:
        arguments:
            $titleParts: '%retromat.plan.titles%'

    App\Model\Plan\TitleRenderer:
        arguments:
            $parts: '%retromat.plan.titles%'

    App\Model\User\UserResetPasswordManager:
        arguments:
            $resetRequestLifetime: 3600

    App\Model\User\Generator\UserResetPasswordTokenGenerator:
        arguments:
            $signingKey: NpGqMRwfIA0Eg6Usd

    App\Model\User\Mailer\UserResetPasswordMailer:
        arguments:
            $from: '%env(MAILER_FROM_ADDRESS)%'
            $subject: 'Passwort Reset'
            $template: 'user/reset-password/email/reset-password-request.txt.twig'

    Hackzilla\PasswordGenerator\Generator\ComputerPasswordGenerator:
        class: Hackzilla\PasswordGenerator\Generator\ComputerPasswordGenerator

    Presta\SitemapBundle\Service\UrlContainerInterface:
        class: Presta\SitemapBundle\Service\UrlContainerInterface